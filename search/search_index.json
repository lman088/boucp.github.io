{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"preview.html","title":"\u09aa\u09cd\u09b0\u09bf\u09ad\u09bf\u0989","text":""},{"location":"preview.html#article-preview","title":"Article Preview","text":"<p>Information for contributors  # Example article  $$a^2 + b^2 = c^2$$  ```cpp int gcd (int a, int b) {     if (b == 0)         return a;     else         return gcd (b, a % b); } ``` Preview (Ctrl + Enter) <p></p> <p></p>"},{"location":"tags.html","title":"Tags","text":"<p>This file contains a global index of all tags used on the pages.</p>"},{"location":"tags.html#_1","title":"\u0995\u09cd\u09b0\u09ae","text":"<ul> <li>Selection Sort</li> </ul>"},{"location":"tags.html#_2","title":"\u09aa\u09be\u099c\u09b2","text":"<ul> <li>\u09b9\u09cd\u09af\u09be\u09a8\u09df\u09c7\u09b0 \u099f\u09be\u0993\u09df\u09be\u09b0</li> </ul>"},{"location":"tags.html#_3","title":"\u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b8\u09bf\u09ad","text":"<ul> <li>\u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b6\u09a8</li> <li>\u09b9\u09cd\u09af\u09be\u09a8\u09df\u09c7\u09b0 \u099f\u09be\u0993\u09df\u09be\u09b0</li> </ul>"},{"location":"tags.html#_4","title":"\u09b8\u09b0\u09cd\u099f\u09bf\u0982","text":"<ul> <li>Selection Sort</li> </ul>"},{"location":"tags.html#_5","title":"\u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995","text":"<ul> <li>\u09b9\u09cd\u09af\u09be\u09a8\u09df\u09c7\u09b0 \u099f\u09be\u0993\u09df\u09be\u09b0</li> </ul>"},{"location":"bound/fifteenpuzzlesolve.html","title":"15 puzzle","text":""},{"location":"bound/fifteenpuzzlesolve.html#algorithm","title":"Algorithm","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MX 100005\n#define N 4\nusing namespace std;\n\nstruct node\n{\nnode *parent;\nint pos[N][N], cost, x, y, level;\n};\ntypedef node node;\nnode *a[MX];\nint s = -1;\nvoid min_heapify(int i, int n)\n{\nint left = 2 * i + 1;\nint right = left + 1;\nint m = i;\nif (left &lt; n &amp;&amp; a[left]-&gt;cost + a[left]-&gt;level &lt; a[m]-&gt;cost + a[m]-&gt;level)\nm = left;\nif (right &lt; n &amp;&amp; a[right]-&gt;cost + a[right]-&gt;level &lt; a[m]-&gt;cost + a[m]-&gt;level)\nm = right;\nif (m != i)\n{\nswap(a[m], a[i]);\nmin_heapify(m, n);\n}\n}\n\nint len(){\nreturn s;\n}\n\nvoid push(node *x)\n{\ns++;\nint n = s;\na[n] = x;\nwhile (n &gt; 0 &amp;&amp; a[n]-&gt;cost + a[n]-&gt;level &lt; a[(n - 1) / 2]-&gt;cost + a[(n - 1) / 2]-&gt;level)\n{\nswap(a[n], a[(n - 1) / 2]);\nn = (n - 1) / 2;\n}\n}\nint isempty()\n{\nreturn s == -1;\n}\nnode *top()\n{\nif (!isempty())\n{\nreturn a[0];\n}\nelse\nreturn nullptr;\n}\n\nvoid pop()\n{\nif (!isempty())\n{\n\nswap(a[0], a[s]);\nmin_heapify(0, s);\ns--;\n}\nelse\ncout &lt;&lt; \"que is empty\\n\";\n}\n\nnode *createnode(int pos[N][N], node *parent, int x, int y, int tx, int ty, int l)\n{\nnode *child = new node;\nchild-&gt;parent = parent;\nmemcpy(child-&gt;pos, pos, sizeof(child-&gt;pos));\nswap(child-&gt;pos[x][y], child-&gt;pos[tx][ty]);\nchild-&gt;x = tx;\nchild-&gt;y = ty;\nchild-&gt;cost = INT_MAX;\nchild-&gt;level = l;\nreturn child;\n}\n\n\nint countcost(int arr[N][N], int ans[N][N])\n{\nint count = 0;\nfor (int i = 0; i &lt; N; i++)\nfor (int j = 0; j &lt; N; j++)\n{\nif (arr[i][j] != ans[i][j])\ncount++;\n}\nreturn count;\n}\nint col[4] = {1, -1, 0, 0};\nint row[4] = {0, 0, 1, -1};\nbool safezone(int x, int y)\n{\nif (x &gt;= 0 &amp;&amp; x &lt; N &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; N)\nreturn true;\nreturn false;\n}\nvoid printpos(int arr[N][N])\n{\nfor (int i = 0; i &lt; N; i++)\n{\ncout &lt;&lt; \"----------------\\n\";\n// cout&lt;&lt;\"****************\\n\";\n{\nfor (int j = 0; j &lt; N; j++)\nprintf(\"|%2d \", arr[i][j]);\n}\n\ncout &lt;&lt; \"|\\n\";\n}\ncout &lt;&lt; \"----------------\\n\\n\";\n}\nvoid print(node *x)\n{\nif (x != NULL)\n{\nprint(x-&gt;parent);\nprintpos(x-&gt;pos);\n}\n}\n\nbool solveable(int arr[N][N], int y, int z)\n{\n\nint x = 0, a[N * N], k = -1;\nfor (int i = 0; i &lt; N; i++)\n{\nfor (int j = 0; j &lt; N; j++)\n{\na[++k] = arr[i][j];\nif (a[k] == 0)\na[k] = N * N;\n}\n}\nint less = 0;\nif ((y + z) &amp; 1)\nx = 1;\nfor (int i = 0; i &lt; N * N - 1; i++)\n{\nfor (int j = i + 1; j &lt; N * N; j++)\n{\nif (a[i] &gt; a[j])\n{\nless++;\n}\n}\n}\n\nif ((less + x) &amp; 1)\nreturn false;\nreturn true;\n}\n\nvoid LCsolve(int initial[N][N], int ans[N][N], int x, int y)\n{\nint l = 0;\nnode *root = createnode(initial, NULL, x, y, x, y, l);\nroot-&gt;cost = countcost(root-&gt;pos, ans);\npush(root);\nwhile (!isempty())\n{\nnode *enode = top();\npop();\nif (enode-&gt;cost == 0)\n{\nprint(enode);\nreturn;\n}\nelse\n{\nfor (int i = 0; i &lt; 4; i++)\n{\nint u =enode-&gt;x + col[i];\nint v =enode-&gt;y + row[i];\n\nif (safezone(u, v))\n{\nnode *live = createnode(enode-&gt;pos, enode, enode-&gt;x, enode-&gt;y, u, v, l + 1);\nlive-&gt;cost = countcost(live-&gt;pos, ans);\n\nif(s==MX-1){\ncout&lt;&lt;\"NOT POSSIBLE TO SOLVED BY B&amp;B ALGORITHM BECAUSE OF EXTREME SPACE MEMEORY.\\nINSTEAD, TRY A* ALGORITHM FOR THIS TYPE OF COMPLEX PROBLEMS\\n\";\nreturn;\n}\npush(live);\n}\n}\n}\n}\n}\n\nint main()\n{\n// Use terminal, delete below two lines.\nfreopen(\"input.txt\", \"r\", stdin);\nfreopen(\"output.txt\", \"w\", stdout);\nint puzzle[N][N], answer[N][N], y, z;\ncout &lt;&lt; \"INITIAL STATE OF PUZZLE:\\n\";\nfor (int i = 0; i &lt; N; i++)\n{\nfor (int j = 0; j &lt; N; j++)\n{\ncin &gt;&gt; puzzle[i][j];\nif (puzzle[i][j] == 0)\n{\ny = i;\nz = j;\n}\n}\n}\nprintpos(puzzle);\ncout &lt;&lt; \"GOAL STATE OF PUZZLE:\\n\";\nfor (int i = 0; i &lt; N; i++)\n{\nfor (int j = 0; j &lt; N; j++)\n{\ncin &gt;&gt; answer[i][j];\n}\n}\nprintpos(answer);\n\nif (!solveable(puzzle, y, z))\n{\ncout &lt;&lt; \"THIS PUZZLE IS NOT SOLVEABLE.\";\n}\nelse{\ncout&lt;&lt;\"THIS PUZZLE IS SOLVEABLE AND HERE IS THE SOLUTION:\\n\";\nLCsolve(puzzle, answer, y, z);\n}\n\nreturn 0;\n}\n</code></pre>"},{"location":"cs/bs.html","title":"Backtracing","text":"<p>also called recursive backtracing. may be called \"clever brute force\" (i don't know)</p>"},{"location":"cs/bs.html#remember-things","title":"Remember things","text":"<ul> <li>satisfied some constraints.</li> <li>explicit and implicit constriants.</li> <li>brute force make explicit n\u00b2 </li> <li>bound function make imlicit n!</li> <li>live node</li> <li>E node</li> <li>dead node</li> <li>answer node</li> </ul>"},{"location":"cs/bs.html#n-queen-psudocode","title":"N-Queen Psudocode","text":"PlaceNqueen <pre><code>place(k,i)\nfor j = 1 to k-1 \n    if x[j]=i or Abs(x[j]-i) = Abs(j-k)\n         do return false\nreturn true\n</code></pre> <pre><code>Nqueen(k,n)\nfor i = 1 to k\n    if place(k,i)\n        then x[k] = i\n             if k = n\n               do write  x[1:n]\n             else\n               Nqueen(k+1,n) \n</code></pre>"},{"location":"cs/bs.html#n-queen-implement","title":"N-Queen Implement","text":"Python(place)Python(Nqueen)Python(full code) <pre><code>def place(k,i):\nfor j in range(1,k):\n    if x[j] == i or abs(x[j]-i) == abs(j-k):\n        return False\nreturn True\n</code></pre> <pre><code>def nqueen(k,n):\nfor i in range(1,n+1):\n    if place(k,i):\n        x[k]=i\n        if k==n:\n            print(x[1:n+1])\n        else:\n            nqueen(k+1,n)\n</code></pre> <pre><code>def place(k,i):\nfor j in range(1,k):\n    if x[j] == i or abs(x[j]-i) == abs(j-k):\n        return False\nreturn True\ndef nqueen(k,n):\nfor i in range(1,n+1):\n    if place(k,i):\n        x[k]=i\n        if k==n:\n            print(x[1:n+1])\n        else:\n            nqueen(k+1,n)\nn=int(input())\nx=[0]*(n+1)\nnqueen(1,n)\n</code></pre>"},{"location":"cs/bs.html#related-problems","title":"Related Problems","text":"<ul> <li>UVa 725 - Division</li> </ul>"},{"location":"graph/bfs.html","title":"What is bfs ?","text":""},{"location":"graph/dfs.html","title":"What is DFS ?","text":""},{"location":"recursion/factorial.html","title":"\u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b6\u09a8","text":"","tags":["\u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b8\u09bf\u09ad"]},{"location":"recursion/toh.html","title":"\u09b9\u09cd\u09af\u09be\u09a8\u09df\u09c7\u09b0 \u099f\u09be\u0993\u09df\u09be\u09b0 \u09b8\u09ae\u09b8\u09cd\u09af\u09be","text":"<p>Pre-requisite topic:</p> <ul> <li>Recursion  </li> <li>Stack</li> </ul> <p>Tower of Hanoy \u09ac\u09be \u09b9\u09cd\u09af\u09be\u09a8\u09af\u09bc\u09c7\u09b0 \u099f\u09be\u0993\u09af\u09bc\u09be\u09b0 \u098f\u09ae\u09a8 \u098f\u0995\u099f\u09bf \u09aa\u09be\u099c\u09b2 \u09af\u09c7\u0996\u09be\u09a8\u09c7 \u09b8\u09be\u09a7\u09be\u09b0\u09a8\u09a4 \u09a4\u09bf\u09a8\u099f\u09bf \u0996\u09c1\u0981\u099f\u09bf \u098f\u09ac\u0982 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u0986\u0995\u09be\u09b0\u09c7\u09b0 \u0995\u09bf\u099b\u09c1 \u09b8\u0982\u0996\u09cd\u09af\u09be\u0995 \u09a1\u09bf\u09b8\u09cd\u0995 \u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995 \u0986\u0995\u09be\u09b0\u09c7 \u09b8\u09be\u099c\u09be\u09a8\u09cb \u09a5\u09be\u0995\u09c7\u0964 \u098f\u0987 \u09aa\u09be\u099c\u09b2\u09c7\u09b0 \u09ae\u09c2\u09b2 \u0989\u09a6\u09cd\u09a6\u09c7\u09b6\u09cd\u09af \u09b9\u09b2 \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995\u099f\u09bf\u0995\u09c7 \u09aa\u09cd\u09b0\u09a5\u09ae \u0996\u09c1\u0981\u099f\u09bf \u09a5\u09c7\u0995\u09c7 \u09a4\u09c3\u09a4\u09c0\u09df \u0996\u09c1\u0981\u099f\u09bf\u09a4\u09c7 \u09a8\u09bf\u09af\u09bc\u09c7 \u09af\u09be\u0993\u09df\u09be\u0964 \u09a4\u09ac\u09c7 \u09a1\u09bf\u09b8\u09cd\u0995 \u09b8\u09b0\u09be\u09a8\u09c7\u09be\u09b0 \u0995\u09cd\u09b7\u09c7\u09a4\u09cd\u09b0\u09c7 \u0995\u09df\u09c7\u0995\u099f\u09bf \u09ac\u09cd\u09af\u09be\u09aa\u09be\u09b0 \u09ae\u09be\u09a5\u09be\u09df \u09b0\u09be\u0996\u09a4\u09c7 \u09b9\u09ac\u09c7:</p> <ul> <li>\u098f\u0995\u09ac\u09be\u09b0\u09c7 \u09b6\u09c1\u09a7\u09c1\u09ae\u09be\u09a4\u09cd\u09b0 \u098f\u0995\u099f\u09bf \u09a1\u09bf\u09b8\u09cd\u0995 \u09b8\u09b0\u09be\u09a8\u09cb \u09af\u09be\u09ac\u09c7\u0964</li> <li>\u09aa\u09cd\u09b0\u09a4\u09bf\u099f\u09bf \u09aa\u09a6\u0995\u09cd\u09b7\u09c7\u09aa\u09c7 \u098f\u0995\u099f\u09bf \u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995\u09c7\u09b0 \u0989\u09aa\u09b0\u09c7\u09b0 \u09a1\u09bf\u09b8\u09cd\u0995\u099f\u09bf \u09a8\u09c7\u0993\u09af\u09bc\u09be \u09af\u09be\u09ac\u09c7 \u098f\u09ac\u0982 \u098f\u099f\u09bf\u0995\u09c7 \u0985\u09a8\u09cd\u09af \u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995\u09c7\u09b0 \u0989\u09aa\u09b0\u09c7 \u09ac\u09be \u098f\u0995\u099f\u09bf \u0996\u09be\u09b2\u09bf \u09ae\u09c7\u09b0\u09c1\u09a4\u09c7 \u09b8\u09cd\u09a5\u09be\u09aa\u09a8 \u0995\u09b0\u09be \u09af\u09be\u09ac\u09c7\u0964 </li> <li>\u098f\u0995\u099f\u09bf \u099b\u09cb\u099f \u09a1\u09bf\u09b8\u09cd\u0995\u09c7\u09b0 \u0989\u09aa\u09b0\u09c7 \u0995\u09cb\u09a8 \u09ac\u09dc \u09a1\u09bf\u09b8\u09cd\u0995 \u09b8\u09cd\u09a5\u09be\u09aa\u09a8 \u0995\u09b0\u09be \u09af\u09be\u09ac\u09c7 \u09a8\u09be\u0964 </li> </ul> <p>\u098f\u0987 \u09aa\u09be\u099c\u09b2\u099f\u09bf \u09b8\u09ae\u09be\u09a7\u09be\u09a8 \u0995\u09b0\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u0986\u09ae\u09b0\u09be \u098f\u0995\u099f\u09bf \u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b8\u09bf\u09ad \u0985\u09cd\u09af\u09be\u09b2\u0997\u09b0\u09bf\u09a6\u09ae \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09a4\u09c7 \u09aa\u09be\u09b0\u09bf\u0964 </p>","tags":["\u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b8\u09bf\u09ad","\u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995","\u09aa\u09be\u099c\u09b2"]},{"location":"recursion/toh.html#_2","title":"\u0985\u09cd\u09af\u09be\u09b2\u0997\u09b0\u09bf\u09a6\u09ae","text":"<ul> <li>\u09a7\u09be\u09aa \u09e7: n-1 \u09b8\u0982\u0996\u09cd\u09af\u0995 \u09a1\u09bf\u09b8\u09cd\u0995 \u09b8\u09cb\u09b0\u09cd\u09b8 \u09a5\u09c7\u0995\u09c7 \u0985\u09a4\u09bf\u09b0\u09bf\u0995\u09cd\u09a4 \u0996\u09c1\u0981\u099f\u09bf\u09a4\u09c7 \u09b0\u09be\u0996\u09be\u0964</li> <li>\u09a7\u09be\u09aa \u09e8: n \u09a4\u09ae \u09a1\u09bf\u09b8\u09cd\u0995 \u09b8\u09cb\u09b0\u09cd\u09b8 \u09a5\u09c7\u0995\u09c7 \u099f\u09be\u09b0\u09cd\u0997\u09c7\u099f \u0996\u09c1\u0981\u099f\u09bf\u09a4\u09c7 \u09b0\u09be\u0996\u09be\u0964</li> <li>\u09a7\u09be\u09aa \u09e9: n-1 \u09b8\u0982\u0996\u09cd\u09af\u0995 \u09a1\u09bf\u09b8\u09cd\u0995 \u0985\u09a4\u09bf\u09b0\u09bf\u0995\u09cd\u09a4 \u0996\u09c1\u0981\u099f\u09bf \u09a5\u09c7\u0995\u09c7 \u0996\u09c1\u0981\u099f\u09bf\u09a4\u09c7 \u09aa\u09bf\u09b2\u09be\u09b0\u09c7 \u09b0\u09be\u0996\u09be\u0964 </li> </ul>","tags":["\u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b8\u09bf\u09ad","\u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995","\u09aa\u09be\u099c\u09b2"]},{"location":"recursion/toh.html#_3","title":"\u09b8\u09c1\u09a1\u09cb\u0995\u09cb\u09a1","text":"<p><pre><code>Procedure move(disks,source,target,extrapole)\nif disks &gt; 1 then do\n# move n-1 disks to extrapole from source.\nmove(disks-1,source,extrapole,target) // head recursion\nwrite source to new_target\nif disks = 1 then do\n# move n-th disk to target from source.\nwrite source to target\nif disks &gt;1 then do\n# move n-1 disks to target from ectrapole.\nmove(disks-1,extrapole,target,source) // tail recursion\nEND\n</code></pre> </p>","tags":["\u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b8\u09bf\u09ad","\u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995","\u09aa\u09be\u099c\u09b2"]},{"location":"recursion/toh.html#_4","title":"\u0987\u09ae\u09cd\u09aa\u09cd\u09b2\u09bf\u09ae\u09c7\u09a8\u09cd\u099f","text":"CC++PythonJava <pre><code>void move(int n,char a,char b,char c)\n{\nif(n&gt;1)\n{\nmove(n-1,a,c,b);\nprintf(\"%c to %c\\n\",a,b);\n}\nif(n==1)\n{\nprintf(\"%c to %c\\n\",a,b);\n}\nif(n&gt;1)\n{\nmove(n-1,c,b,a);\n}\n}\n</code></pre> <pre><code>void move(int n,char a,char b,char c)\n{\nif(n&gt;1)\n{\nmove(n-1,a,c,b);\ncout&lt;&lt;a&lt;&lt;\" to \"&lt;&lt;b&lt;&lt;endl;\n}\nif(n==1)\n{\ncout&lt;&lt;a&lt;&lt;\" to \"&lt;&lt;b&lt;&lt;endl;\n}\nif(n&gt;1)\n{\nmove(n-1,c,b,a);\n}\n}\n</code></pre> <pre><code>def move(n,a,b,c):\nif n&gt;1:\n    move(n-1,a,c,b)\n    print(a+\" to \"+b)\nif n==1:\n    print(a+\" to \"+b)\nif n&gt;1:\n    move(n-1,c,b,a)\n</code></pre> <pre><code>public static void move(int n,char a,char b,char c)\n{\n\nif (n &gt; 1)\n{\nmove(n - 1, a, c, b);\nSystem.out.println(a+\" to \"+b);\n\n}\nif (n == 1)\n{\nSystem.out.println(a+\" to \"+b);\n\n}\nif (n &gt; 1)\n{\nmove(n - 1, c, b, a);\n}\n}\n</code></pre>","tags":["\u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b8\u09bf\u09ad","\u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995","\u09aa\u09be\u099c\u09b2"]},{"location":"recursion/toh.html#_5","title":"\u09b8\u09cd\u09aa\u09c7\u09b8/ \u099f\u09be\u0987\u09ae \u0995\u09ae\u09cd\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf","text":"<ul> <li>\u099f\u09be\u0987\u09ae \u0995\u09ae\u09cd\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf: O(2^n)</li> <li>\u09b8\u09cd\u09aa\u09c7\u09b8 \u0995\u09ae\u09cd\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf: O(n)</li> </ul>","tags":["\u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b8\u09bf\u09ad","\u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995","\u09aa\u09be\u099c\u09b2"]},{"location":"recursion/toh.html#_6","title":"\u0995\u09bf\u099b\u09c1 \u09b8\u09ae\u09b8\u09cd\u09af\u09be \u0993 \u09b8\u09ae\u09be\u09a7\u09be\u09a8","text":"<ul> <li>10017 - The Never Ending Towers of Hanoi<ul> <li>Solution</li> </ul> </li> <li>UVa 254 - Towers of Hanoi</li> <li>UVa 10276 - Hanoi Tower Troubles Again!</li> </ul>","tags":["\u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b8\u09bf\u09ad","\u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995","\u09aa\u09be\u099c\u09b2"]},{"location":"sorting/heapsort.html","title":"Heap Sort","text":""},{"location":"sorting/heapsort.html#implement","title":"Implement","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define print(a) for(int i:arr)cout&lt;&lt;i&lt;&lt;\" \"\nusing namespace std;\nvoid max_heapify(int a[],int n,int i)\n{\nint l=2*i+1;\nint r=2*i+2;\nint m=i;\nif(l&lt;n &amp;&amp; a[l]&gt;a[m])\nm=l;\nif(r&lt;n &amp;&amp; a[r]&gt;a[m])\nm=r;\nif(i!=m)\n{\nswap(a[i],a[m]);\nmax_heapify(a,n,m);\n}\n}\nvoid maxheap(int a[],int n)\n{\nfor(int i=n/2+1;i&gt;=0;i--)\nmax_heapify(a,n,i);\n}\nvoid heapsort(int a[],int n)\n{\nmaxheap(a,n);\nfor(int i=n-1;i&gt;0;i--)\n{\nswap(a[i],a[0]);\nmax_heapify(a,i,0);\n}\n}\nint main()\n{\nfreopen(\"input.txt\",\"r\",stdin);\nfreopen(\"output.txt\",\"w\",stdout);\nint s;\ncin&gt;&gt;s;\nint arr[s];\nfor(int i=0;i&lt;s;i++)\ncin&gt;&gt;arr[i];\nheapsort(arr,s);\nprint(arr);\n}\n</code></pre>"},{"location":"sorting/mergesort.html","title":"Merge sort","text":""},{"location":"sorting/mergesort.html#implement","title":"Implement","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define INF 9999\nusing namespace std;\nvoid merge(int a[],int l,int m, int r)\n{\nint n1=m-l+1;\nint n2=r-m;\nint arr1[n1+1],arr2[n2+1];\narr1[n1]=INF;\narr2[n2]=INF;\nfor(int i=0;i&lt;n1;i++)\narr1[i]=a[l+i];\nfor(int i=0;i&lt;n2;i++)\narr2[i]=a[m+1+i];\nint i=0,j=0;\nfor(int k=l;k&lt;=r;k++)\n{\nif(arr1[i] &lt;= arr2[j])\n{\na[k]=arr1[i];\ni++;\n}\nelse\n{\na[k]=arr2[j];\nj++;\n}\n}\n}\nvoid mergesort(int a[],int l,int r)\n{\nif(l&lt;r)\n{\nint m=(l+r)/2;\nmergesort(a,l,m);\nmergesort(a,m+1,r);\nmerge(a,l,m,r);\n}    }\nint main()\n{\nfreopen(\"input.txt\",\"r\",stdin);\nfreopen(\"output.txt\",\"w\",stdout);\nint s;\ncin&gt;&gt;s;\nint arr[s];\nfor(int i=0;i&lt;s;i++)\ncin&gt;&gt;arr[i];\nmergesort(arr,0,s-1);  for(int i:arr)\ncout&lt;&lt;i&lt;&lt;\" \";\n}\n</code></pre>"},{"location":"sorting/quicksort.html","title":"Quick Sort","text":""},{"location":"sorting/quicksort.html#implement","title":"Implement","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint part(int a[],int l,int r)\n{\nint x=a[r];\nint i=l-1;\nfor(int j=l;j&lt;r;j++)\n{\nif(a[j]&lt;=x)\n{\ni++;\nswap(a[j],a[i]);\n\n}\n}\nswap(a[i+1],a[r]);\nreturn i+1;\n}\n\nvoid quicksort(int a[],int l,int r)\n{\nif(l&lt;r)\n{\nint p=part(a,l,r);\nquicksort(a,l,p-1);\nquicksort(a,p+1,r);\n\n}\n}\n\nint main()\n{\nfreopen(\"input.txt\",\"r\",stdin);\nfreopen(\"output.txt\",\"w\",stdout);\nint s;\ncin&gt;&gt;s;\nint arr[s];\nfor(int i=0;i&lt;s;i++)\ncin&gt;&gt;arr[i];\nquicksort(arr,0,s-1);  for(int i:arr)\ncout&lt;&lt;i&lt;&lt;\" \";\n}\n</code></pre>"},{"location":"sorting/selectionsort.html","title":"Selection Sort","text":"","tags":["\u09b8\u09b0\u09cd\u099f\u09bf\u0982","\u0995\u09cd\u09b0\u09ae"]},{"location":"sorting/selectionsort.html#pre-requisite-topic","title":"Pre-requisite topic:","text":"<ul> <li>Array</li> </ul>","tags":["\u09b8\u09b0\u09cd\u099f\u09bf\u0982","\u0995\u09cd\u09b0\u09ae"]},{"location":"sorting/selectionsort.html#_1","title":"\u09b8\u09bf\u09b2\u09c7\u0995\u09b6\u09a8 \u09b6\u09b0\u09cd\u099f","text":"<p>\u09b8\u09bf\u09b2\u09c7\u0995\u09b6\u09a8 \u09b8\u09b0\u09cd\u099f \u09b9\u099a\u09cd\u099b\u09c7 \u098f\u09ae\u09a8 \u098f\u0995 \u09b8\u09b0\u09cd\u099f\u09bf\u0982 \u099f\u09c7\u0995\u09a8\u09bf\u0995, \u09af\u09be \u09aa\u09cd\u09b0\u09a5\u09ae\u09c7 \u0985\u09cd\u09af\u09be\u09b0\u09c7\u09b0 \u09aa\u09cd\u09b0\u09a4\u09cd\u09af\u09c7\u0995 \u0986\u0987\u099f\u09c7\u09ae\u0995\u09c7 \u09b0\u09bf\u09a1 \u0995\u09b0\u09c7 \u098f\u09ac\u0982 \u0985\u09cd\u09af\u09be\u09b0\u09c7\u09b0 \u09b8\u09ac\u099a\u09c7\u09af\u09bc\u09c7 \u099b\u09cb\u099f \u0986\u0987\u099f\u09c7\u09ae\u0995\u09c7 \u09b8\u09bf\u09b2\u09c7\u0995\u09cd\u099f \u0995\u09b0\u09c7\u0964 \u098f\u09b0\u09aa\u09b0 \u09b8\u09c7\u0987 \u0986\u0987\u099f\u09c7\u09ae\u09c7\u09b0 \u09b8\u09be\u09a5\u09c7 \u0985\u09cd\u09af\u09be\u09b0\u09c7\u09b0 \u09aa\u09cd\u09b0\u09a5\u09ae \u0986\u0987\u099f\u09c7\u09ae \u09aa\u09b0\u09bf\u09ac\u09b0\u09cd\u09a4\u09a8 \u0995\u09b0\u09c7\u0964 \u09a4\u09be\u09b0\u09aa\u09b0 \u098f\u0995\u0987\u09ad\u09be\u09ac\u09c7 \u09a6\u09cd\u09ac\u09bf\u09a4\u09c0\u09af\u09bc \u099b\u09cb\u099f \u0986\u0987\u099f\u09c7\u09ae \u0996\u09c1\u0981\u099c\u09c7 \u09ac\u09c7\u09b0 \u0995\u09b0\u09c7\u0964 \u098f\u09ac\u0982 \u09b8\u09c7\u0987 \u0986\u0987\u099f\u09c7\u09ae\u0995\u09c7 \u0985\u09cd\u09af\u09be\u09b0\u09c7\u09b0 \u09a6\u09cd\u09ac\u09bf\u09a4\u09c0\u09af\u09bc \u0986\u0987\u099f\u09c7\u09ae\u09c7\u09b0 \u09b8\u09be\u09a5\u09c7 \u09aa\u09b0\u09bf\u09ac\u09b0\u09cd\u09a4\u09a8 \u0995\u09b0\u09c7\u0964 \u098f\u09ad\u09be\u09ac\u09c7 \u0995\u09b0\u09c7 \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u0985\u09cd\u09af\u09be\u09b0\u09c7 \u09b8\u09b0\u09cd\u099f\u09c7\u09a1 \u09a8\u09be \u09b9\u0993\u09df\u09be \u09aa\u09b0\u09cd\u09af\u09a8\u09cd\u09a4 \u098f\u0987 \u09aa\u09cd\u09b0\u09b8\u09c7\u09b8 \u099a\u09b2\u09a4\u09c7 \u09a5\u09be\u0995\u09c7\u0964</p>","tags":["\u09b8\u09b0\u09cd\u099f\u09bf\u0982","\u0995\u09cd\u09b0\u09ae"]},{"location":"sorting/selectionsort.html#_2","title":"\u0985\u09cd\u09af\u09be\u09b2\u0997\u09b0\u09bf\u09a6\u09ae","text":"<ol> <li>Set i to 0.</li> <li>If i is less than the length of the array, go to step 3. Otherwise, the sorting is complete.</li> <li>Set minIndex to i.</li> <li>Iterate over the remaining unsorted part of the array, starting from i+1. For each element:</li> <li>If the current element is smaller than the element at minIndex, update minIndex to the index of the current element.</li> <li>If minIndex is not equal to i, swap the elements at i and minIndex.</li> <li>Increment i by 1 and go back to step 2.</li> </ol>","tags":["\u09b8\u09b0\u09cd\u099f\u09bf\u0982","\u0995\u09cd\u09b0\u09ae"]},{"location":"sorting/selectionsort.html#implement","title":"Implement","text":"Python <p>```python3  def selectionsort(arr,n):  for i in range(n):  min = i  for j in range(i+1,n):  if arr[j]&lt;arr[min]:  min = j  if min != i:  a[min],a[i]=a[i],a[min]</p> <p><code>a=[43,5,4,2,1,6] s=len(a) selectionsort(a,s) print(*a) ```</code></p> C++ <p><code>cpp  void selectionsort(int arr[],int n)  {  for(int i=0;i&lt;n;i++)  {  int min = i;  for (int j=i+1;j&lt;n;j++)  {  if(arr[j]&lt;arr[min])  min = j;  }  if (i != min)  swap(arr[i],arr[min]);  }  }</code></p>","tags":["\u09b8\u09b0\u09cd\u099f\u09bf\u0982","\u0995\u09cd\u09b0\u09ae"]},{"location":"tags.html","title":"Tags","text":"<p>This file contains a global index of all tags used on the pages.</p>"},{"location":"tags.html#_1","title":"\u0995\u09cd\u09b0\u09ae","text":"<ul> <li>Selection Sort</li> </ul>"},{"location":"tags.html#_2","title":"\u09aa\u09be\u099c\u09b2","text":"<ul> <li>\u09b9\u09cd\u09af\u09be\u09a8\u09df\u09c7\u09b0 \u099f\u09be\u0993\u09df\u09be\u09b0</li> </ul>"},{"location":"tags.html#_3","title":"\u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b8\u09bf\u09ad","text":"<ul> <li>\u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b6\u09a8</li> <li>\u09b9\u09cd\u09af\u09be\u09a8\u09df\u09c7\u09b0 \u099f\u09be\u0993\u09df\u09be\u09b0</li> </ul>"},{"location":"tags.html#_4","title":"\u09b8\u09b0\u09cd\u099f\u09bf\u0982","text":"<ul> <li>Selection Sort</li> </ul>"},{"location":"tags.html#_5","title":"\u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995","text":"<ul> <li>\u09b9\u09cd\u09af\u09be\u09a8\u09df\u09c7\u09b0 \u099f\u09be\u0993\u09df\u09be\u09b0</li> </ul>"}]}